/*!
 * © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
 */

import { HttpClient, HttpClientModule } from '@angular/common/http';
import { TestBed } from '@angular/core/testing';
import { Site } from 'app/shared/site-language/site-language.service';
import { StaticConfigurationServiceStubModule } from 'app/testing/static-configuration-stub';
import { TestBedInjectSpy } from 'app/testing/test.utils';
import { firstValueFrom, of } from 'rxjs';
import { Page } from '../page/page.types';
import { LOCAL_DATASOURCES_ENABLED_KEY } from './site-mapper';
import { SiteApiService } from './site.api.service';
import { SiteResponse } from './site.types';

const xmAppsApiBaseUrl = 'https://sites-api-url.com/';
const pageServiceEndpoint = 'api/v1/pages/';
const siteServiceEndpoint = 'api/v1/sites/';
const expectedCacheHeaders = { headers: { 'X-NG-HTTP-CACHING-ALLOW-CACHE': 'ALLOW' } };

describe(SiteApiService.name, () => {
  let sut: SiteApiService;
  let httpClientSpy: jasmine.SpyObj<HttpClient>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientModule, StaticConfigurationServiceStubModule],
      providers: [
        {
          provide: HttpClient,
          useValue: jasmine.createSpyObj<HttpClient>({ get: undefined, post: undefined, delete: undefined }),
        },
        SiteApiService,
      ],
    });

    httpClientSpy = TestBedInjectSpy(HttpClient);
    sut = TestBed.inject(SiteApiService);
  });

  it('should be created', () => {
    expect(sut).toBeTruthy();
  });

  it('should fetch sites successfully', async () => {
    const sitesResponse: SiteResponse[] = [
      {
        id: '1',
        name: 'Site1',
        description: 'Description 1',
        displayName: 'Display Name 1',
        thumbnailUrl: 'thumbnail-url-1',
        thumbnailsRootPath: 'thumbnails-root-path-1',
        thumbnail: {
          url: 'thumbnail-url',
          rootPath: 'thumbnails-root-path',
          autogenerated: true,
          base64: null,
        },
        collectionId: 'collection-id',
        collectionName: 'collection-name',
        created: 'created-date',
        createdBy: 'creator',
        sortOrder: 1,
        brandKitId: 'brand-kit-id',
        access: {
          canAdmin: true,
          canWrite: true,
          canCreate: true,
          canDelete: true,
          canRename: true,
          canRead: true,
          canPublish: true,
          canDuplicate: true,
        },
        languages: ['en', 'es'],
        hosts: [
          {
            id: 'host1',
            name: 'host1',
            homePageId: 'home-page-id-1',
            renderingHost: {
              id: '00000000-0000-0000-0000-000000000000',
              name: 'xmcloudpreview-r-h',
              appName: 'xmcloudpreview',
              layoutServiceConfiguration: 'sxa-jss',
              serverSideRenderingEngineEndpointUrl: 'https://rh.com/api/editing/render',
              serverSideRenderingEngineApplicationUrl: 'https://rh.com',
            },
            created: null,
            createdBy: null,
            hostnames: ['*'],
            targetHostname: '',
            languageSettings: {
              defaultLanguage: 'en',
              languageEmbedding: false,
              itemLanguageFallback: false,
              fieldLanguageFallback: false,
            },
            analyticsIdentifiers: {
              en: 'point-of-sale-en',
            },
            properties: {
              IsSxaSite: 'true',
            },
            permissions: {
              canAdmin: true,
              canWrite: true,
              canCreate: true,
              canDelete: true,
              canRename: true,
              canRead: true,
              canPublish: true,
              canDuplicate: true,
            },
            settings: {},
          },
        ],
        supportedLanguages: ['en', 'es'],
        settings: {},
        properties: { IsSxaSite: 'true', tagsFolderId: 'tag-folder-id', [LOCAL_DATASOURCES_ENABLED_KEY]: 'true' },
      },
    ];

    const expectedSites: Site[] = [
      {
        id: '1',
        name: 'host1',
        displayName: 'Display Name 1',
        language: 'en',
        hostId: 'host1',
        pointOfSale: [
          {
            language: 'en',
            name: 'point-of-sale-en',
          },
        ],
        startItemId: 'home-page-id-1',
        appName: 'xmcloudpreview',
        layoutServiceConfig: 'sxa-jss',
        renderingEngineEndpointUrl: 'https://rh.com/api/editing/render',
        renderingEngineApplicationUrl: 'https://rh.com',
        supportedLanguages: ['en', 'es'],
        collectionId: 'collection-id',
        brandKitId: 'brand-kit-id',
        properties: {
          isSxaSite: true,
          tagsFolderId: 'tag-folder-id',
          isLocalDatasourcesEnabled: true,
        },
      },
    ];

    httpClientSpy.get.and.returnValue(of(sitesResponse));

    const actualSites = await firstValueFrom(sut.getSites());

    expect(actualSites).toEqual(expectedSites);
    expect(httpClientSpy.get).toHaveBeenCalledWith(`${xmAppsApiBaseUrl}${siteServiceEndpoint}`, expectedCacheHeaders);
  });

  it('should fetch start item successfully', () => {
    const siteId = '123';
    const language = 'en';
    const siteName = 'host1';

    const mockSiteResponse: SiteResponse = {
      id: '123',
      name: 'Site1',
      description: 'Description 1',
      displayName: 'Display Name 1',
      thumbnailUrl: 'thumbnail-url-1',
      thumbnailsRootPath: 'thumbnails-root-path-1',
      thumbnail: {
        url: 'thumbnail-url',
        rootPath: 'thumbnails-root-path',
        autogenerated: true,
        base64: null,
      },
      collectionId: 'collection-id',
      collectionName: 'collection-name',
      created: 'created-date',
      createdBy: 'creator',
      sortOrder: 1,
      brandKitId: 'brand-kit-id',
      access: {
        canAdmin: true,
        canWrite: true,
        canCreate: true,
        canDelete: true,
        canRename: true,
        canRead: true,
        canPublish: true,
        canDuplicate: true,
      },
      languages: ['en', 'es'],
      hosts: [
        {
          id: 'host1',
          name: 'host1',
          homePageId: 'home-page-id-1',
          renderingHost: {
            id: '00000000-0000-0000-0000-000000000000',
            name: 'xmcloudpreview-r-h',
            appName: 'xmcloudpreview',
            layoutServiceConfiguration: 'sxa-jss',
            serverSideRenderingEngineEndpointUrl: 'https://rh.com/api/editing/render',
            serverSideRenderingEngineApplicationUrl: 'https://rh.com',
          },
          created: null,
          createdBy: null,
          hostnames: ['*'],
          targetHostname: '',
          languageSettings: {
            defaultLanguage: 'en',
            languageEmbedding: false,
            itemLanguageFallback: false,
            fieldLanguageFallback: false,
          },
          analyticsIdentifiers: {
            en: 'point-of-sale-en',
          },
          properties: {
            IsSxaSite: 'true',
          },
          permissions: {
            canAdmin: true,
            canWrite: true,
            canCreate: true,
            canDelete: true,
            canRename: true,
            canRead: true,
            canPublish: true,
            canDuplicate: true,
          },
          settings: {},
        },
      ],
      supportedLanguages: ['en', 'es'],
      settings: { IsSxaSite: 'true' },
      properties: { IsSxaSite: 'true', tagsFolderId: 'tag-folder-id' },
    };

    const expectedStartItem = { id: 'home-page-id-1', version: 2 };

    const mockPages: Page[] = [
      {
        id: 'home-page-id-1',
        name: 'start-item-name',
        displayName: 'start-item-display-name',
        language: 'en',
        version: 2,
        templateId: 'template-id',
        parentId: 'parent-id',
        hasPresentation: true,
        hasChildren: true,
        url: 'page-url',
        icon: 'page-icon',
        versionName: 'page-version-name',
        revision: 'page-revision',
        createdAt: 'page-created-at',
        updatedAt: 'page-updated-at',
        createdBy: 'page-created-by',
        template: {
          id: 'template-id',
          name: 'template-name',
          path: 'template-path',
          baseTemplateIds: ['2bb25752-b3bc-4f13-b9cb-38b906d21a33', '77b1399f-5f30-4643-a054-59bbb1c7c62c'],
          displayName: '',
        },
        workflow: {
          id: 'workflow-id',
          displayName: 'workflow-display-name',
          finalState: true,
          canEdit: true,
          warnings: [],
          icon: 'workflow-icon',
          commands: [],
        },
        publishing: {
          isPublishable: true,
          hasPublishableVersion: true,
          isAvailableToPublish: true,
          validFromDate: 'page-valid-from-date',
          validToDate: 'page-valid-to-date',
        },
        route: 'page-route',
        finalLayout: 'page-layout',
        sharedLayout: 'page-shared-layout',
        layoutEditingKind: 'FINAL',

        permissions: {
          canAdmin: true,
          canWrite: true,
          canCreate: true,
          canDelete: true,
          canRename: true,
          canRead: true,
          canPublish: true,
        },
        locking: {
          canUnlock: true,
          isLocked: false,
          lockedBy: '',
          lockedByCurrentUser: false,
        },
        hasVersions: true,
        insertOptions: [],
        updatedBy: '',
        path: '',
      },
    ];

    httpClientSpy.get
      .withArgs(`${xmAppsApiBaseUrl}${siteServiceEndpoint}${siteId}`)
      .and.returnValue(of(mockSiteResponse));

    httpClientSpy.get
      .withArgs(
        `${xmAppsApiBaseUrl}${pageServiceEndpoint}${mockSiteResponse.hosts[0].homePageId}/versions?site=${mockSiteResponse.hosts[0].name}&language=${language}`,
      )
      .and.returnValue(of(mockPages));

    sut.getStartItem(siteId, siteName, language).subscribe((startItem) => {
      expect(startItem).toEqual(expectedStartItem);
    });
    expect(httpClientSpy.get).toHaveBeenCalledWith(`${xmAppsApiBaseUrl}${siteServiceEndpoint}${siteId}`);
    expect(httpClientSpy.get).toHaveBeenCalledWith(
      `${xmAppsApiBaseUrl}${pageServiceEndpoint}${mockSiteResponse.hosts[0].homePageId}/versions?site=${mockSiteResponse.hosts[0].name}&language=${language}`,
    );
  });

  it('should fetch default site successfully', async () => {
    const siteId = 'root-page-id-1';
    const language = 'en';
    const siteName = 'site1';

    const mockSiteResponse: SiteResponse = {
      id: 'root-page-id-1',
      name: 'Site1',
      description: 'Description 1',
      displayName: 'Display Name 1',
      thumbnailUrl: 'thumbnail-url-1',
      thumbnailsRootPath: 'thumbnails-root-path-1',
      thumbnail: {
        url: 'thumbnail-url',
        rootPath: 'thumbnails-root-path',
        autogenerated: true,
        base64: null,
      },
      collectionId: 'collection-id',
      collectionName: 'collection-name',
      brandKitId: 'brand-kit-id',
      created: 'created-date',
      createdBy: 'creator',
      sortOrder: 1,
      access: {
        canAdmin: true,
        canWrite: true,
        canCreate: true,
        canDelete: true,
        canRename: true,
        canRead: true,
        canPublish: true,
        canDuplicate: true,
      },
      languages: ['en', 'es'],
      hosts: [
        {
          id: 'host1',
          name: 'host1',
          homePageId: 'home-page-id-1',
          renderingHost: {
            id: '00000000-0000-0000-0000-000000000000',
            name: 'xmcloudpreview-r-h',
            appName: 'xmcloudpreview',
            layoutServiceConfiguration: 'sxa-jss',
            serverSideRenderingEngineEndpointUrl: 'https://rh.com/api/editing/render',
            serverSideRenderingEngineApplicationUrl: 'https://rh.com',
          },
          created: null,
          createdBy: null,
          hostnames: ['*'],
          targetHostname: '',
          languageSettings: {
            defaultLanguage: 'en',
            languageEmbedding: false,
            itemLanguageFallback: false,
            fieldLanguageFallback: false,
          },
          analyticsIdentifiers: {
            en: 'point-of-sale-en',
          },
          properties: {
            IsSxaSite: 'true',
          },
          permissions: {
            canAdmin: true,
            canWrite: true,
            canCreate: true,
            canDelete: true,
            canRename: true,
            canRead: true,
            canPublish: true,
            canDuplicate: true,
          },
          settings: {},
        },
      ],
      supportedLanguages: ['en', 'es'],
      settings: { IsSxaSite: 'true' },
      properties: { IsSxaSite: 'true', tagsFolderId: 'tag-folder-id' },
    };

    const mockPages: Page[] = [
      {
        id: 'root-page-id-1',
        name: 'start-item-name',
        displayName: 'start-item-display-name',
        language: 'en',
        version: 2,
        templateId: 'template-id',
        parentId: 'parent-id',
        hasPresentation: true,
        hasChildren: true,
        url: 'page-url',
        icon: 'page-icon',
        versionName: 'page-version-name',
        revision: 'page-revision',
        createdAt: 'page-created-at',
        updatedAt: 'page-updated-at',
        createdBy: 'page-created-by',
        template: {
          id: 'template-id',
          name: 'template-name',
          path: 'template-path',
          baseTemplateIds: ['2bb25752-b3bc-4f13-b9cb-38b906d21a33', '77b1399f-5f30-4643-a054-59bbb1c7c62c'],
          displayName: '',
        },
        workflow: {
          id: 'workflow-id',
          displayName: 'workflow-display-name',
          finalState: true,
          canEdit: true,
          warnings: [],
          icon: 'workflow-icon',
          commands: [],
        },
        publishing: {
          isPublishable: true,
          hasPublishableVersion: true,
          isAvailableToPublish: true,
          validFromDate: 'page-valid-from-date',
          validToDate: 'page-valid-to-date',
        },
        route: 'page-route',
        finalLayout: 'page-layout',
        sharedLayout: 'page-shared-layout',
        layoutEditingKind: 'FINAL',

        permissions: {
          canAdmin: true,
          canWrite: true,
          canCreate: true,
          canDelete: true,
          canRename: true,
          canRead: true,
          canPublish: true,
        },
        locking: {
          canUnlock: true,
          isLocked: false,
          lockedBy: '',
          lockedByCurrentUser: false,
        },
        hasVersions: true,
        insertOptions: [],
        updatedBy: '',
        path: '',
      },
    ];

    httpClientSpy.get
      .withArgs(`${xmAppsApiBaseUrl}${siteServiceEndpoint}${siteId}`)
      .and.returnValue(of(mockSiteResponse));

    httpClientSpy.get
      .withArgs(
        `${xmAppsApiBaseUrl}${pageServiceEndpoint}${mockSiteResponse.hosts[0].homePageId}/versions?site=${mockSiteResponse.hosts[0].name}&language=${language}`,
      )
      .and.returnValue(of(mockPages));

    const actualSite = await firstValueFrom(sut.getDefaultSite(siteId, siteName));

    expect(actualSite).toEqual({
      id: mockSiteResponse.id,
      name: mockSiteResponse.hosts[0].name,
    });
    expect(httpClientSpy.get).toHaveBeenCalledWith(`${xmAppsApiBaseUrl}${siteServiceEndpoint}${siteId}`);
  });

  it('should fetch first site when site name is not passed', async () => {
    const language = 'en';

    const mockSiteResponse: SiteResponse = {
      id: '123',
      name: 'Site1',
      description: 'Description 1',
      displayName: 'Display Name 1',
      thumbnailUrl: 'thumbnail-url-1',
      thumbnailsRootPath: 'thumbnails-root-path-1',
      hosts: [
        {
          id: 'host1',
          name: 'host1',
          homePageId: 'home-page-id-1',
          renderingHost: {
            id: '00000000-0000-0000-0000-000000000000',
            name: 'xmcloudpreview-r-h',
            appName: 'xmcloudpreview',
            layoutServiceConfiguration: 'sxa-jss',
            serverSideRenderingEngineEndpointUrl: 'https://rh.com/api/editing/render',
            serverSideRenderingEngineApplicationUrl: 'https://rh.com',
          },
          created: null,
          createdBy: null,
          hostnames: ['*'],
          targetHostname: '',
          languageSettings: {
            defaultLanguage: 'en',
            languageEmbedding: false,
            itemLanguageFallback: false,
            fieldLanguageFallback: false,
          },
          analyticsIdentifiers: {
            en: 'point-of-sale-en',
          },
          properties: {
            IsSxaSite: 'true',
            'tags-folder-id': 'tag-folder-id',
          },
          permissions: {
            canAdmin: true,
            canWrite: true,
            canCreate: true,
            canDelete: true,
            canRename: true,
            canRead: true,
            canPublish: true,
            canDuplicate: true,
          },
          settings: {},
        },
      ],
      settings: { IsSxaSite: 'true' },
      supportedLanguages: ['en', 'es'],
      collectionId: '',
      collectionName: null,
      brandKitId: '',
      created: '',
      createdBy: '',
      sortOrder: 0,
      languages: [],
      thumbnail: {
        url: 'thumbnail-url',
        rootPath: 'thumbnails-root-path',
        autogenerated: true,
        base64: null,
      },
      access: {
        canAdmin: true,
        canWrite: true,
        canCreate: true,
        canDelete: true,
        canRename: true,
        canRead: true,
        canPublish: true,
        canDuplicate: true,
      },
      properties: {},
    };

    const mockPages: Page[] = [
      {
        id: '123',
        name: 'start-item-name',
        displayName: 'start-item-display-name',
        language: 'en',
        version: 2,
        templateId: 'template-id',
        parentId: 'parent-id',
        hasPresentation: true,
        hasChildren: true,
        url: 'page-url',
        icon: 'page-icon',
        versionName: 'page-version-name',
        revision: 'page-revision',
        createdAt: 'page-created-at',
        updatedAt: 'page-updated-at',
        createdBy: 'page-created-by',
        template: {
          id: 'template-id',
          name: 'template-name',
          path: 'template-path',
          displayName: 'template-display-name',
          baseTemplateIds: ['2bb25752-b3bc-4f13-b9cb-38b906d21a33', '77b1399f-5f30-4643-a054-59bbb1c7c62c'],
        },
        workflow: {
          id: 'workflow-id',
          displayName: 'workflow-display-name',
          finalState: true,
          canEdit: true,
          warnings: [],
          icon: 'workflow-icon',
          commands: [],
        },
        publishing: {
          isPublishable: true,
          hasPublishableVersion: true,
          isAvailableToPublish: true,
          validFromDate: 'page-valid-from-date',
          validToDate: 'page-valid-to-date',
        },
        route: 'page-route',
        finalLayout: 'page-layout',
        sharedLayout: 'page-shared-layout',
        layoutEditingKind: 'FINAL',

        permissions: {
          canAdmin: true,
          canWrite: true,
          canCreate: true,
          canDelete: true,
          canRename: true,
          canRead: true,
          canPublish: true,
        },
        locking: {
          canUnlock: true,
          isLocked: false,
          lockedBy: '',
          lockedByCurrentUser: false,
        },
        hasVersions: true,
        insertOptions: [],
        updatedBy: '',
        path: '',
      },
    ];

    httpClientSpy.get
      .withArgs(`${xmAppsApiBaseUrl}${siteServiceEndpoint}`, jasmine.anything())
      .and.returnValue(of([mockSiteResponse]));

    httpClientSpy.get
      .withArgs(
        `${xmAppsApiBaseUrl}${pageServiceEndpoint}${mockSiteResponse.hosts[0].homePageId}/versions?site=${mockSiteResponse.hosts[0].name}&language=${language}`,
      )
      .and.returnValue(of(mockPages));

    const actualSite = await firstValueFrom(sut.getDefaultSite(undefined, undefined));

    expect(actualSite).toEqual({
      id: mockSiteResponse.id,
      name: mockSiteResponse.hosts[0].name,
    });
    expect(httpClientSpy.get).toHaveBeenCalledWith(`${xmAppsApiBaseUrl}${siteServiceEndpoint}`, expectedCacheHeaders);
  });
});
