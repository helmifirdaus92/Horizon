<?xml version="1.0" encoding="utf-8"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
  <sitecore role:require="Standalone or ContentManagement or XmCloud">
    <settings>
      <!--
                HORIZON CLIENT HOST
                Specifies the path of the Horizon host client.
                Default value: "https://localhost:5001"
            -->
      <setting name="Horizon.ClientHost" value="https://localhost:5001" />
      <!--
                HORIZON CLIENT HOST START PAGE
                Specifies the path of the Horizon host client to be the entry point to the application.
                Default value: "/pages"
            -->
      <setting name="Horizon.ClientHostStartPage" value="/" />
      <!--
                HORIZON CLIENT HOST ANTI FORGERY TOKEN SECRET
                Specifies the secret that used to generate anti forgery token for Horizon host client application.
                In a multi-instance setup, use the same value for Horizon.ClientHostSecret on every instance.

                ClientHostSecret value is base64 string that codes minimum 64 bytes.
                Default value: If value is empty token generation will fall back to 64 bytes random secret generation.
            -->
      <setting name="Horizon.ClientHostSecret" value="" />
      <!--
                HORIZON EXTRA CONTENT SCOPE PATHS

                Specifies the paths for Horizon GraphQL API that extends the default source.
                In case content locates under Sitecore item like "sitecore/custom content" then it is required to update the setting.

                ExtraContentScopePaths takes item path as a value to extend the default root. Use pipe to set multiple paths.
                Default value: If a value is empty the "/sitecore/content" path is used. Setting value extends the default scope.
            -->
      <setting name="Horizon.ExtraContentScopePaths" value="" />
      <!--
                HORIZON EXECUTE WORKFLOW FOR PAGE DATASOURCES WHICH ARE ON THE SAME WORKFLOW STATE

                Specifies if the datasources used by the page should be moved by workflow when the page is moved by the workflow.
                Datasources will be moved only if they have same workflow and same state as the page.
                If workflow move fails for some datasource, then the state will be rolled back for the page and all the datasources.
            -->
      <setting name="Horizon.Workflow.ExecuteForPageDatasourcesOnSameState" value="true" />

      <!--
                HORIZON ENABLE COMPONENTS TESTING
                Enables a/b test on Components in Pages
                Default value is false
            -->
      <setting name="Horizon.Enable.ComponentsTesting" value="$(env:PAGES_ENABLE_COMPONENTS_TESTING)" />

      <!--
                HORIZON ENABLE OPTIMIZE CONTENT
                Enables Optimize Content on Components in Pages
                Default value is false
            -->
      <setting name="Horizon.Enable.OptimizeContent" value="$(env:PAGES_ENABLE_OPTIMIZE_CONTENT)" />

      <!--
                HORIZON ENABLE CKEDITOR
                Enables CKEditor support for RTE field in Pages
                Default value is false
            -->
      <setting name="Horizon.Enable.CKEditor" value="$(env:PAGES_ENABLE_NEW_RTE_EDITOR)" />

      <!--
                HORIZON PERSONALIZE SCOPE
                Specifies a scope for personalization rules. Allows applying different personalization rules for different environments on the same tenant.
                Default value: If a values is empty, no personalization scoping is applied.
            -->
      <setting name="Horizon.Personalize.Scope" value="$(env:PAGES_PERSONALIZE_SCOPE)" />
    </settings>

    <pipelines>
      <preAuthenticateRequest>
        <processor type="Sitecore.Horizon.Integration.Pipelines.PreAuthenticateRequest.RegisterIFrameAllowedDomains, Sitecore.Horizon.Integration" resolve="true" />
      </preAuthenticateRequest>

      <getStartUrl>
        <processor type="Sitecore.Horizon.Integration.Pipelines.ClientLanguage.SetClientLanguage, Sitecore.Horizon.Integration" resolve="true" />
      </getStartUrl>

      <httpRequestBegin>
        <processor type="Sitecore.Horizon.Integration.Pipelines.HttpRequest.InitializeHorizon, Sitecore.Horizon.Integration"
                   patch:before="processor[@type='Sitecore.Pipelines.HttpRequest.UserResolver, Sitecore.Kernel']"
                   resolve="true" />
      </httpRequestBegin>

      <getChromeData>
        <processor patch:instead="*[@type='Sitecore.Pipelines.GetChromeData.Setup, Sitecore.Kernel']" type="Sitecore.Horizon.Integration.Pipelines.GetChromeData.Setup, Sitecore.Horizon.Integration" resolve="true" />
        <processor patch:instead="*[@type='Sitecore.Pipelines.GetChromeData.GetRenderingChromeData, Sitecore.Kernel']" type="Sitecore.Horizon.Integration.Pipelines.GetChromeData.FillHorizonRenderingChromeData, Sitecore.Horizon.Integration" resolve="true" />
        <processor patch:instead="*[@type='Sitecore.Pipelines.GetChromeData.GetFieldChromeData, Sitecore.Kernel']" type="Sitecore.Horizon.Integration.Pipelines.GetChromeData.FillHorizonFieldChromeData, Sitecore.Horizon.Integration" resolve="true" />
        <processor type="Sitecore.Horizon.Integration.Pipelines.GetChromeData.FillHorizonPlaceholderChromeData, Sitecore.Horizon.Integration" resolve="true" />
      </getChromeData>

      <mvc.requestEnd>
        <processor type="Sitecore.Horizon.Integration.Pipelines.MvcRequestEnd.RenderHorizonPageExtenders, Sitecore.Horizon.Integration" resolve="true" />
        <processor type="Sitecore.Horizon.Integration.Pipelines.MvcRequestEnd.RegisterIFrameAllowedDomainsMvc, Sitecore.Horizon.Integration" resolve="true" />
      </mvc.requestEnd>

      <getLayoutSourceFields>
        <processor type="Sitecore.Horizon.Integration.Pipelines.GetLayoutSourceFields.SelectLayoutKindInMetadataMode, Sitecore.Horizon.Integration" resolve="true"/>
      </getLayoutSourceFields>

      <group groupName="ExperienceEditor" name="ExperienceEditor">
        <pipelines>
          <canShowEditor>
            <processor type="Sitecore.Horizon.Integration.Pipelines.CanShowEditor.HandleHorizonMode, Sitecore.Horizon.Integration" resolve="true" />
          </canShowEditor>
        </pipelines>
      </group>

      <group groupName="Horizon" name="Horizon">
        <pipelines>
          <collectIFrameAllowedDomains>
            <processor type="Sitecore.Horizon.Integration.Pipelines.CollectIFrameAllowedDomains.AddDomains, Sitecore.Horizon.Integration" resolve="true">
              <allowedDomains hint="list:AddDomain">
                <domain>'self'</domain>
              </allowedDomains>
            </processor>

            <processor type="Sitecore.Horizon.Integration.Pipelines.CollectIFrameAllowedDomains.AddDomainsList, Sitecore.Horizon.Integration" resolve="true">
              <AllowedDomains desc="AllowedDomains"></AllowedDomains>
            </processor>

            <processor type="Sitecore.Horizon.Integration.Pipelines.CollectIFrameAllowedDomains.AddHorizonClientHost, Sitecore.Horizon.Integration" resolve="true" />



          </collectIFrameAllowedDomains>
        </pipelines>
      </group>

      <group groupName="layoutService">
        <pipelines>
          <getLayoutServiceContextClientData>
            <processor type="Sitecore.Horizon.Integration.Pipelines.GetLayoutServiceContextClientData.AddHorizonClientData, Sitecore.Horizon.Integration" resolve="true" />
          </getLayoutServiceContextClientData>
          <getLayoutServiceContext>
            <processor type="Sitecore.Horizon.Integration.Pipelines.GetLayoutServiceContext.AddHorizonEditingScript, Sitecore.Horizon.Integration" resolve="true" patch:after="*[@type='Sitecore.XA.JSS.Foundation.LayoutService.Pipelines.GetLayoutServiceContext.ClientScripts, Sitecore.XA.JSS.Foundation.LayoutService']" />
          </getLayoutServiceContext>
        </pipelines>
      </group>

    </pipelines>

    <pageextenders>
      <pageextender type="Sitecore.Horizon.Integration.Layouts.HorizonPageExtender, Sitecore.Horizon.Integration" />
    </pageextenders>

    <services>
      <configurator type="Sitecore.Horizon.Integration.DependencyInjection.HorizonServiceConfigurator, Sitecore.Horizon.Integration" />
    </services>

  </sitecore>
</configuration>
